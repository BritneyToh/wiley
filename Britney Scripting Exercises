##Scripting Exercises
##Create a simple shell script to tell the user about their session
vi userdata.sh
#!/bin/sh
echo $USER
echo $pwd
echo $ ls | wc -l
echo $ sudo du -a | sort -n -r | head -n 1
esc
:wq
chmod 777 userdata.sh
./userdata.sh

##Create a directory with a few test files in it (the files can be empty). Now write a script that for every file in that directory you rename it to have an extension of today's date in YYYYMMDD format.
mkdir testdir
cd ~/testdir
touch file1 file2 file3

TODAY=`date +%Y.%m.%d`
for FILE in $(ls $testdir)
do
mv $FILE ${TODAY}_${FILE}
done

##You are in charge of creating a program for the lottery in your area! The options are for numbers between 1and 50. Create a script that picks 5 for each draw plus a bonus ball number between 1 and 10. Output the numbers to a file that has the date in its name.
shuf -n 5 -e {1..50} > Winners.txt
shuf -n 1 -e {1..10} >> Winners.txt

#! /bin/sh
FOUND=0
echo "Enter number"
read USER_INPUT
echo $USER_INPUT

for i in `cat Winners.txt`
do
if(( $USER_INPUT == $i ))
then
((FOUND++))
BONUS=`tail -n 1 Winners.txt`
if(( $i == $BONUS ))
then
((FOUND++))
fi
break
fi
done
echo $FOUND
if(( $FOUND > 0 ))
then echo "CONGRATS, YOU WON ${FOUND} MATCHES"
else echo "YOU LOSE"
fi

##Write a script to determine how secure a password is
vi password.sh
#!/bin/sh
echo "Enter new password"
read USER_INPUT
if(( ${#USER_INPUT} > 7 ))
then
T1="True"
else
echo "PASSWORD LENGTH SHOULD BE LONGER THAN 7 CHARACTERS"
exit 1
fi

STR=$USER_INPUT
T2=`echo $STR | grep "[0-9]"`
if [ -z "$T2" ]
then
echo "PASSWORD MUST CONTAIN AT LEAST 1 DIGIT"
exit 1
else
T1="True"
fi

T2=`echo $STR | grep "[a-Z]"`
if [ -z "$T2" ]
then
echo "PASSWORD MUST CONTAIN AT LEAST 1 LETTER"
exit 1
else
T1="TRUE"
fi

T2=`echo $STR | grep "[a-z]"`
if [ -z "$T2" ]
then
echo "PASSWORD MUST CONTAIN AT LEAST 1 LOWERCASE"
exit 1
else
T1="TRUE"
fi

T2=`echo $STR | grep "[A-Z]"`
if [ -z "$T2" ]
then
echo "PASSWORD MUST CONTAIN AT LEAST 1 UPPERCASE"
exit 1
else
T1="TRUE"
fi

esc
:wq
chmod 777 password.sh
./password.sh

##Write a script that takes a number as an input and reverses it out to the user. 
vi reversenumber.sh
#!/bin/sh
echo "Enter number"
read NUMBER
echo $NUMBER | rev

esc
:wq
chmod 777 reversenumber.sh
./reversenumber.sh

##Create a script that takes two number parameters a and b and then shows True if a is larger than b or False otherwise.
vi parameter.sh
#!/bin/sh
echo "Key in parameter A"
read INPUTA
echo "Key in parameter B"
read INPUTB
T1=`echo $INPUTA | grep "[0-9]"`
if [ -z "$T1" ]
then 
echo "PARAMETER MUST BE A NUMBER"
exit 1
fi
T1=`echo $INPUTB | grep "[0-9]"`
if [ -z "$T1" ]
then 
echo "PARAMETER MUST BE A NUMBER"
exit 1
fi

if (( $INPUTA > $INPUTB ))
then
echo "TRUE a is greater than b"
RESULT=$(($INPUTA-$INPUTB))
echo "The difference is $RESULT"
else
echo "FALSE a is not greater than b"
fi

esc
:wq
chmod 777 parameter.sh
./parameter.sh

## Create a 10-question true or false quiz game in your script. Choose a topic of your liking for the questions!
vi quiz.sh
#!/bin/sh
echo "Question 1: What is the third planet from the sun?"
read USER_INPUT
if [ "${USER_INPUT,,}" = "earth" ]
then
echo "TRUE"
else
echo "FALSE"
fi

echo "Question 2: How many planets do we have in our solar system?"
read USER_INPUT
if (($USER_INPUT=8))
then
echo "TRUE"
else
echo "FALSE"
fi

echo "Question 3: Which number planet is Jupiter?"
read USER_INPUT
if (($USER_INPUT=5))
then
echo "TRUE"
else
echo "FALSE"
fi

echo "Question 4: How many days does it take for the Earth to complete one single orbit?"
read USER_INPUT
if (($USER_INPUT=365))
then
echo "TRUE"
else
echo "FALSE"
fi

echo "Question 5: Which planet is furthest from the sun?"
read USER_INPUT
if [ "${USER_INPUT,,}" = "pluto" ]
then
echo "TRUE"
else
echo "FALSE"
fi

echo "Question 6: Which planet is nearest from the sun?"
read USER_INPUT
if [ "${USER_INPUT,,}" = "mercury" ]
then
echo "TRUE"
else
echo "FALSE"
fi

echo "Question 7: Which planet has the most moons?"
read USER_INPUT
if [ "${USER_INPUT,,}" = "saturn" ]
then
echo "TRUE"
else
echo "FALSE"
fi

echo "Question 8: How many moons does Saturn have?"
read USER_INPUT
if (($USER_INPUT=82))
then
echo "TRUE"
else
echo "FALSE"
fi

echo "Question 9: When was the last Apollo mission?"
read USER_INPUT
if (($USER_INPUT=1972))
then
echo "TRUE"
else
echo "FALSE"
fi

echo "Question 10: What year did the States land on the moon?"
read USER_INPUT
if (($USER_INPUT=1969))
then
echo "TRUE"
else
echo "FALSE"
fi

## Activity 8
#!/bin/sh
i=1
arr=()
while (( i < 6 ))
do
echo "ENTER INPUT NUMBER ${i}"
read INP
arr+=($INP)
((i++))
done
echo ${arr[@]}
echo "DO YOU WANT TO CONTINUE?(true/false)"
read INP
YES=${INP}
while [ $YES == "true" ] && [ $i -lt "11" ]
do
echo "ENTER INPUT NUMBER ${i}"
read INP
arr+=($INP)
((i++))
if (( "$i" < 11 ))
then
echo "Do YOU WANT TO CONTINUE?(true/false)"
read INP
YES=${INP}
fi
done
mult=1
sum=0
min=${arr[0]}
max=${arr[0]}
for ii in ${arr[@]}
do
mult=$((mult*ii))
sum=$((sum+ii))
if (( min > ii ))
then
min=$ii
fi
if (( max < ii ))
then
max=$ii
fi
done
echo "product is $mult"
avg=$((sum/i))
echo "average is $avg"
echo "sum is $sum"
echo "max is $max"

## Activity 9
#!/bin/bash
pr=$1
[ -e $pr ] && echo "ERROR 49: File existed" || ( touch $pr ; echo "$pr created" )

## Activity 10
#!/bin/bash
[ -e $1 ] && ( echo "ERROR 49: File existed" ; exit 0 ) || ( touch $1 ; echo "$1 created" )

i=0

while [ $i -le $2 ]
do
echo $RANDOM >> $1
((i++))
done

## Activity 11
#!/bin/bash
#readarray -t arr < sq.txt
inp=`cat sq.txt`
arr=($inp)
l=${#arr[*]}
i=1
arr=(`echo "${arr[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '`)
swap=1
while (( swap == 1 ))
do
i=1
swap=0
while (( i <= $(( l - 1 )) ))
do
if (( arr[$((i-1))] < arr[$i] ))
then
temp=${arr[$((i-1))]}
arr[$((i-1))]=${arr[$i]}
arr[$i]=$temp
swap=1
fi
((i++))
done
done
echo ${arr[@]}
exit 0

## Write a script that checks if two files have at least one common element or not. Display an appropriate message for both scenarios. 
#!/bin/bash
i1=(`cat $1`)
i2=(`cat $2`)
for i in ${i1[@]}
do
for ii in ${i2[@]}
do
if (( i == ii ))
echo "TRUE"
return true
fi
done
done
echo "FAIL"

## Write a script that takes two files of unique numbers and displays the difference between the two lists (without using grep).
#! /bin/sh
echo "1,2,4,6" >> u.txt
echo "1,2,6,7,89" >> u2.txt
i1=(`cat u.txt`)
echo ${i1[@]}
i2=(`cat u2.txt`)
echo ${i2[@]}
found=0
echo "Diff in list 1"
for i in ${i1[@]}
do
for ii in ${i2[@]}
do
if (( i == ii ))
then
found=1
break
fi
done
if (( found == 0 ))
then
echo $i
fi
found=0
done
echo "Diff in list 2"
for i in ${i2[@]}
do
for ii in ${i1[@]}
do
if (( i == ii ))
then
found=1
break
fi
done
if (( found == 0 ))
then
echo $i
fi
found=0
done

## Activity 15
#!/bin/bash

echo "Checking FixGen directory path"
[ -d ~/FixGen ] && echo "Existed" || ( echo "FixGen folder does not exist -- creating -- created" && mkdir ~/FixGen )

echo "Checking FixGen/logs directory path"
[ -d ~/FixGen/logs ] && echo "Existed" || ( echo "FixGen/logs folder does not exist -- creating -- created" && mkdir ~/FixGen/logs )

find ~/FixGen/logs -name "fixlog*"
find -name "fixlog*" | grep -o -E "[0-9]+" > temp.txt
readarray -t a < sort temp.txt
#cat temp.txt | readarray -t a
IFS=$'\n' 
sorted=($(sort <<<"${a[*]}"))
unset IFS
b=()
i=0
l=$(( ${#a[*]} - 4 ))
for i in `seq 0 $l`; do b+=( fixlog${a[$i]}.log ); done
gzip ${b[*]}
~/FixGen/logs/fixGenerator.sh &

0 6 * * 1-5 ~/FixGen/logs/fixGenerator.sh

## Activity 17
sed 's/;\/,/g' fix.log > data.csv
sed -i -e '1i"Client","Message Type","Stock","Quantity","Price","Side","Order ID","Last Quantity","Exec ID","Last Price"' /home/data.csv

## Activity 18

